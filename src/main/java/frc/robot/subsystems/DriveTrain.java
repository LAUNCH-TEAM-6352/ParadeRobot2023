// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark rightFrontMotor;
    private Spark rightRearMotor;
    private MotorControllerGroup rightMotorGroup;
    private Spark leftFrontMotor;
    private Spark leftRearMotor;
    private MotorControllerGroup leftMotorGroup;
    private DifferentialDrive drive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightFrontMotor = new Spark(0);
        addChild("rightFrontMotor",rightFrontMotor);
        rightFrontMotor.setInverted(false);

        rightRearMotor = new Spark(2);
        addChild("rightRearMotor",rightRearMotor);
        rightRearMotor.setInverted(false);

        rightMotorGroup = new MotorControllerGroup(rightFrontMotor, rightRearMotor  );
        addChild("rightMotorGroup",rightMotorGroup);
 

        leftFrontMotor = new Spark(1);
        addChild("leftFrontMotor",leftFrontMotor);
        leftFrontMotor.setInverted(false);

        leftRearMotor = new Spark(3);
        addChild("leftRearMotor",leftRearMotor);
        leftRearMotor.setInverted(false);

        leftMotorGroup = new MotorControllerGroup(leftFrontMotor, leftRearMotor  );
        addChild("leftMotorGroup",leftMotorGroup);
 

        drive = new DifferentialDrive(leftMotorGroup, rightMotorGroup);
        addChild("drive",drive);
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setMaxOutput(0.1);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void stop()
    {
        drive.stopMotor();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double speed, double turn)
    {
        drive.arcadeDrive(speed, turn);
    }

}

